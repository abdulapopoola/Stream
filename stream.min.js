/*! stream-js - v0.4.0 - 2015-11-28 !
      _                                    __   __    
 ___ | |_  _ __   ___   __ _  _ __ ___     \ \ / _\   
/ __|| __|| '__| / _ \ / _` || '_ ` _ \     \ \\ \    
\__ \| |_ | |   |  __/| (_| || | | | | | /\_/ /_\ \   
|___/ \__||_|    \___| \__,_||_| |_| |_| \___/ \__/   
                                                      
 
*/ 
function fail(a){throw new Error(a)}function Stream(a,b){this.streamFirst=a,this.streamRest=b||function(){return new Stream(null,null)}}function head(){return this.isEmpty()&&fail("Stream is empty!"),this.streamFirst}function tail(){return this.isEmpty()&&fail("Stream is empty!"),this.streamRest()}function isEmpty(){return null==this.streamFirst}function hasEmptyTail(){if(null==this.streamRest)return!0;try{this.tail()}catch(a){return!0}return!1}function append(a){if(this.isEmpty())return a;var b=this;return new Stream(this.head(),function(){return b.tail().append(a)})}function pick(a){if(!a||this.isEmpty())return new Stream(null,null);var b=this;return new Stream(this.head(),function(){return b.tail().pick(a-1)})}function elementAt(a){if(null!=a){for(var b=this;a>0;){if(b.isEmpty()||b.hasEmptyTail())return;b=b.tail(),a--}return b.head()}}function length(){for(var a=0,b=this;!b.isEmpty();)a++,b=b.tail();return a}function reduce(a,b){var c=this;return c.isEmpty()?b:(null==b&&(b=c.head(),c=c.tail()),c.tail().reduce(a,a(b,c.head())))}function sum(){return this.reduce(function(a,b){return a+b},0)}function map(a){null==a&&fail("Mapping function has to be defined");var b=this;return new Stream(a(this.head()),function(){return b.tail().map(a)})}function filter(a){if(this.isEmpty())return this;var b=this.head(),c=this.tail();return a(b)?new Stream(b,function(){return c.filter(a)}):c.filter(a)}function contains(a){for(var b=this;!b.isEmpty();){if(b.head()===a)return!0;b=b.tail()}return!1}function walk(a){for(var b=this;!b.isEmpty();){if(a(b.head()),b.hasEmptyTail())return;b=b.tail()}}function print(a){var b=this.pick(a);b.walk(function(a){console.log(a)})}function remove(a){for(var b=this;a>0;){if(b.isEmpty())return new Stream(null,null);b=b.tail(),a--}return new Stream(b.head(),function(){return b.tail()})}function toArray(){var a=[],b=function(b){a.push(b)};return this.walk(b),a}function add(a,b){return a.isEmpty()?b:b.isEmpty()?a:new Stream(a.head()+b.head(),function(){return Stream.add(a.tail(),b.tail())})}function zip(){for(var a=[].slice.call(arguments),b=[],c=0,d=a.length;d>c;c++){var e=a[c];e.isEmpty()||b.push(e.head())}return new Stream(b,function(){for(var b=[],c=0,d=a.length;d>c;c++){var e=a[c];e.hasEmptyTail()||b.push(e.tail())}return Stream.zip.apply(null,b)})}function create(){if(0===arguments.length)return new Stream(null,null);var a=[].slice.call(arguments,1);return new Stream(arguments[0],function(){return Stream.create.apply(null,a)})}function fromArray(a){return Stream.create.apply(null,a)}function fromInterval(a,b){return a||(a=0),b&&a!==b?new Stream(a,function(){return Stream.fromInterval(a+1,b)}):new Stream(a,null)}function from(a){return a||(a=0),new Stream(a,function(){return Stream.from(a+1)})}function upTo(a){return Stream.fromInterval(0,a)}function Ones(){return new Stream(1,Ones)}function NaturalNumbers(){return new Stream(1,function(){return Stream.add(Stream.NaturalNumbers(),Stream.Ones())})}Stream.prototype.head=head,Stream.prototype.tail=tail,Stream.prototype.isEmpty=isEmpty,Stream.prototype.hasEmptyTail=hasEmptyTail,Stream.prototype.append=append,Stream.prototype.pick=pick,Stream.prototype.elementAt=elementAt,Stream.prototype.length=length,Stream.prototype.reduce=reduce,Stream.prototype.sum=sum,Stream.prototype.map=map,Stream.prototype.filter=filter,Stream.prototype.contains=contains,Stream.prototype.walk=walk,Stream.prototype.print=print,Stream.prototype.remove=remove,Stream.prototype.toArray=toArray,Stream.create=create,Stream.add=add,Stream.zip=zip,Stream.fromArray=fromArray,Stream.fromInterval=fromInterval,Stream.from=from,Stream.upTo=upTo,Stream.Ones=Ones,Stream.NaturalNumbers=NaturalNumbers;